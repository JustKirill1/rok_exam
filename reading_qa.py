import cv2
import numpy as np
import pytesseract
import mss
import re
import time
import threading
import find_qa

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–µ–π (–ª–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è X, Y, –ø—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è X, Y)
REGIONS = {
    "question": (772, 445, 1789, 547),
    "A": (856, 628, 1349, 720),
    "B": (1434, 630, 1931, 715),
    "C": (854, 752, 1350, 845),
    "D": (1435, 755, 1932, 846),
}

previous_text = ""  # –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞

def capture_region(region):
    """–°–Ω–∏–º–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
    with mss.mss() as sct:
        x1, y1, x2, y2 = region
        monitor = {"top": y1, "left": x1, "width": x2 - x1, "height": y2 - y1}
        screenshot = sct.grab(monitor)
        return np.array(screenshot)

def preprocess_image(img):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è OCR"""
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –ß–ë
    _, binary = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)  # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    return binary

def extract_text(img):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = pytesseract.image_to_string(img, lang='rus', config='--oem 3 --psm 6')
    return re.sub(r'[^–ê-–Ø–∞-—è–Å—ë0-9A-Za-z? ,:.]', '', text).strip()  # –û—á–∏—â–∞–µ–º –æ—Ç –º—É—Å–æ—Ä–∞

def scan_loop():
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç"""
    global previous_text
    while True:
        data = {}
        for key, region in REGIONS.items():
            img = capture_region(region)
            img = preprocess_image(img)
            text = extract_text(img)
            data[key] = text
        question = f"{data.get('question')}"
        output = f"\nüìú –í–û–ü–†–û–°:\n{data.get('question', '–û—à–∏–±–∫–∞')}\n\n"
        output += "üìù –í–ê–†–ò–ê–ù–¢–´ –û–¢–í–ï–¢–û–í:\n"
        for key in ["A", "B", "C", "D"]:
            output += f"{key}: {data.get(key, '–û—à–∏–±–∫–∞')}\n"
        if output != previous_text:
            previous_text = output
            print("\n" + "=" * 50)
            print(output)
            print("‚öîÔ∏è –æ—Ç–≤–µ—Ç —Å rokstats:")
            print(find_qa.main(question))
        time.sleep(1)


threading.Thread(target=scan_loop, daemon=True).start()
print(r'''made by
    ___  ___  ___  ________  ___  __    ___     
   |\  \|\  \|\  \|\   ____\|\  \|\  \ |\  \    
   \ \  \ \  \\\  \ \  \___|\ \  \/  /|\ \  \   
 __ \ \  \ \  \\\  \ \_____  \ \   ___  \ \  \  
|\  \\_\  \ \  \\\  \|____|\  \ \  \\ \  \ \  \ 
\ \________\ \_______\____\_\  \ \__\\ \__\ \__\
 \|________|\|_______|\_________\|__| \|__|\|__|
                     \|_________|               
                                                
powered by
          _       _        _      
  _ _ ___| |__ __| |_ __ _| |_ ___
 | '_/ _ \ / /(_-<  _/ _` |  _(_-<
 |_| \___/_\_\/__/\__\__,_|\__/__/
                                                                   
''')
print("‚úÖ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞...\n")
print("üìå –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏.")
print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏ Ctrl+C.")

while True:
    try:
        time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        break
