import requests
import json
import os
from datetime import datetime

URL = "https://rokstats.online/api/peerless-scholar/all-questions"
LOCAL_FILE = "all-questions.json"
UPDATE_LOG = "updates.txt"


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
def download_json():
    response = requests.get(URL)
    if response.status_code == 200:
        return response.json()
    return None


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞
def load_local_json():
    if os.path.exists(LOCAL_FILE):
        with open(LOCAL_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"data": []}


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def check_updates(new_data, old_data):
    old_questions = {q["_id"]: q for q in old_data.get("data", [])}
    new_questions = {q["_id"]: q for q in new_data.get("data", [])}

    updates = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    for q_id, q_info in new_questions.items():
        if q_id not in old_questions:
            question_text = q_info["q"].get("ru", ["–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"])[0] if q_info["q"].get("ru") else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            updates.append(f"–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {question_text}üìå")
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å '{question_text}'")  # –û—Ç–ª–∞–¥–∫–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    for q_id, q_info in new_questions.items():
        old_confirmed = old_questions.get(q_id, {}).get("confirmed", False)
        new_confirmed = q_info.get("confirmed", False)

        question_text = q_info["q"].get("ru", ["–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"])[0] if q_info["q"].get("ru") else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"

        if not old_confirmed and new_confirmed:
            updates.append(f"–£ –≤–æ–ø—Ä–æ—Å–∞ '{question_text}' –ø–æ—è–≤–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω‚úÖ")
            print(f"DEBUG: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ '{question_text}'")  # –û—Ç–ª–∞–¥–∫–∞

    return updates


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
def main():
    new_data = download_json()
    if not new_data:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Å —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    old_data = load_local_json()

    print("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    print("–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    updates = check_updates(new_data, old_data)

    if updates:
        with open(UPDATE_LOG, "a", encoding="utf-8") as log:
            log.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n")
            for update in updates:
                log.write(update + "\n")
            log.write("---\n")
        print("\n".join(updates))
    else:
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")

    with open(LOCAL_FILE, "w", encoding="utf-8") as f:
        json.dump(new_data, f, ensure_ascii=False, indent=4)


if __name__ == "__main__":
    main()
